#!/usr/bin/env bash
set -o errexit
set -o pipefail

__main() {
	if [[ $# -lt 1 ]] ; then
		__usage
		exit 1
	fi

	local preferred_remote="origin"
	if [ -n "$GIT_GET_REMOTE" ] ; then
		preferred_remote="$GIT_GET_REMOTE"
	fi

	local remote_cfg
	remote_cfg=$(git remote -v | grep -Eo "$preferred_remote\s.*\(fetch\)")

	if ! echo "$remote_cfg" | grep -Eo 'github.com' >/dev/null ; then
		echo "fatal: remote doesn't seem to be a github.com project"
		exit 1
	fi

	local remote
	remote=$(echo "$remote_cfg" | grep -Eo "^\w+")

	local user
	user=$(echo "$remote_cfg" | grep -Eo "github.com.*\/" | sed -e s/github.com// -e s:/::g -e s/://)

	local remote_url
	remote_url=$(git remote get-url "$remote")

	local project
	project=$(basename "$remote_url" | sed s:\.git::)

	local cmd=$1

	case "$cmd" in
		fetch)
			if [[ -z "$2" ]]; then
				echo "fatal: you need to pass a pull request number"
				exit 1
			fi

			if [ -n "$2" ] && [ "$2" -eq "$2" ] 2>/dev/null; then
				local number=$2

				local branch
				branch="pull/$number"

				git fetch "$remote" "pull/$number/head:$branch"
				git checkout "$branch"
			else
				echo "fatal: \"$2\" is not a number"
				exit 1
			fi
			;;
		patches)
			local url
			url="https://api.github.com/repos/$user/$project/pulls"
			local resp

			if command -v curl >/dev/null ; then
				resp=$(curl -L -s -f "$url")
			elif  command -v wget >/dev/null ; then
				resp=$(wget --quiet -O - "$url")
			fi

			local patch_urls
			patch_urls=$(echo "$resp" |\
				grep -Eo '\"patch_url\":\s.*"' |\
				sed -e s/\"patch_url\":\ // \
				    -e s/\"//g)

			mkdir -p "patches"

			local patches
			patches=$(echo "$patch_urls" | tr '\n' ' ')

			OIFS=$IFS
			IFS=' '
			for x in $patches
			do
				local patch
				patch=$(echo "$x" | grep -Eo '[[:digit:]]*\.patch')
				if [[ ! -f "patches/$patch" ]] ; then

					if command -v curl >/dev/null ; then
						curl "$x" -L -s -o "patches/$patch"
					elif  command -v wget >/dev/null ; then
						wget --quiet "$x" -o "patches/$patch"
					fi

				else
					echo "skipping $patch, already downloaded."
				fi
			done
			IFS=$OIFS
			;;
		ls)
			local url="https://api.github.com/repos/$user/$project/pulls"
			local resp

			if command -v curl >/dev/null ; then
				resp=$(curl -L -s -f "$url")
			elif  command -v wget >/dev/null ; then
				resp=$(wget --quiet -O - "$url")
			fi

			if [[ -z "$resp" ]]; then
				echo
				echo "no pull requests for $user/$project"
				echo
				exit 0
			fi

			local numbers
			local titles
			local html_urls
			mapfile -t numbers < <(echo "$resp" | grep \"number\" | sed -e s/\"number\":// -e s/\"//g -e s/,//g -e s/^[[:space:]]*//g)
			mapfile -t titles < <(echo "$resp" | grep \"title\" | sed -e s/\"title\":// -e s/\"//g -e s/,//g -e s/^[[:space:]]*//g)
			mapfile -t html_urls < <(echo "$resp" | grep \"html_url\" | sed -e s/\"html_url\":// -e s/\"//g -e s/,//g -e s/^[[:space:]]*//g)

			if [[ ${#numbers[@]} -eq 0 ]]; then
				exit 0
			else
				echo "listing pull requests for $user/$project"
				echo
				for (( i=0; i < ${#numbers[@]}; i++ )); do
					printf "%s %s\n - %s\n\n" "${numbers[i]}" "${titles[i]}" "${html_urls[i]}";
				done
			fi
			;;
		send)
			local target_user
			if [[ -z "$2" ]]; then
				target_user=$user
			else
				target_user=$2
			fi

			local target_branch
			if [[ -z "$3" ]]; then
				target_branch="master"
			else
				target_branch=$3
			fi

			local branch
			branch=$(git branch | grep "\*" | cut -d ' ' -f2)

			local url
			url="https://github.com/$target_user/$project/compare/$target_branch...$user:$branch"

			if command -v open >/dev/null | grep -v "alias" ; then
				open "$url"
			elif  command -v xdg-open >/dev/null ; then
				xdg-open "$url"
			fi
			;;
		*)
			__usage
			exit 1
			;;
	esac
}

__usage() {
	echo
	echo "git get COMMAND"
	echo
	echo "Available commands: "
	echo
	echo "fetch NUMBER           Fetch pull request NUMBER"
	echo "ls                     List pull requests"
	echo "patches                Download patches"
	echo "send [USER][BRANCH]    Open URL to create a pull request"
	echo
}

__main "$@"

