#!/usr/bin/env bash
set -o errexit
set -o pipefail

__main() {
	if [[ $# -lt 1 ]] ; then
		__usage
		exit 1
	fi


	local preferred_remote="origin"
	if [ -n "$GIT_GET_REMOTE" ] ; then
		preferred_remote="$GIT_GET_REMOTE"
	fi

	local remote
	remote=$(git remote -v | grep -Eo "$preferred_remote\s.*\(fetch\)")

	if ! echo "$remote" | grep -Eo 'github.com' >/dev/null ; then
		echo "fatal: remote doesn't seem to be a github.com project"
		exit 1
	fi

	local remote_name
	remote_name=$(echo "$remote" | grep -Eo '^\w+')

	local project
	project=$(echo "$remote" | grep -Eo '(:)(.*\.git)' | sed s/:// | sed s/\.git$// )

	local current_branch
	current_branch=$(git rev-parse --abbrev-ref HEAD)

	local cmd=$1

	case "$cmd" in
		fetch)
			if [[ -z "$2" ]]; then
				echo "fatal: you need to pass a pull request number"
				exit 1
			fi

			if [ -n "$2" ] && [ "$2" -eq "$2" ] 2>/dev/null; then
				local number=$2

				local branch
				branch="pull/$number"

				git fetch "$remote_name" "pull/$number/head:$branch"
				git checkout "$branch"
				git branch --set-upstream-to="$current_branch" "$branch"
			else
				echo "fatal: \"$2\" is not a number"
				exit 1
			fi
			;;
		patches)
			local url
			url="https://api.github.com/repos/$project/pulls"
			local resp
			resp=$(curl -L -s -f "$url")
			local patch_urls
			patch_urls=$(echo "$resp" |\
				python -m json.tool |\
				grep -Eo '\"patch_url\":\s.*"' |\
				sed s/\"patch_url\":\ // |\
				sed s/\"//g)

			mkdir -p "patches"

			local patches
			patches=$(echo "$patch_urls" | tr '\n' ' ')

			OIFS=$IFS
			IFS=' '
			for x in $patches
			do
				local patch
				patch=$(echo "$x" | grep -Eo '[[:digit:]]*\.patch')
				if [[ ! -f "patches/$patch" ]] ; then
					curl "$x" -L -s -o "patches/$patch"
				else
					echo "skipping $patch, already downloaded."
				fi
			done
			IFS=$OIFS
			;;
		ls)
			local url="https://api.github.com/repos/$project/pulls"
			local resp
			resp=$(curl -L -s -f "$url")

			local script
			script=$(cat <<- EOF
			import sys, json;
			ls = json.load(sys.stdin)
			for l in ls: print('{0} {1}\n - {2}\n'.format(l['number'], l['title'], l['url']))
			EOF
			)

			local prs
			prs=$(echo "$resp" | python -c "$script")

			if [[ -n "$prs" ]]; then
				echo "listing pull requests for $project"
				echo
				echo "$prs"
				echo
			fi
			;;
		*)
			__usage
			exit 1
			;;
	esac
}

__usage() {
	echo
	echo "git get COMMAND"
	echo
	echo "Available commands: "
	echo
	echo "fetch NUMBER   Fetch pull request NUMBER"
	echo "ls             List pull requests"
	echo "patches        Download patches"
	echo
}

__main "$@"

